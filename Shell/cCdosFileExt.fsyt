$ Ls.fileExt = this.afterParam('.');

fileExt [ "register" ] () {
    if (fileExt < nul) {
        Ls.unsupported(file) = true;
    }
    
    Ls.key = Ls.header(array).runner();
    register = this.require(fileExt['.xnfr']);
    registerKey = Ls.makeFile(fileName, fileExt['.xnfr']) && Ls.addToFile(fileName, fileExt['.xnfr'], key) {
        denyIf register.key = not(key.registerKey().bytes('32')) < nul;
        registerKey.match [ this.key ] = registerKey.value(noCopy = true).bytes('64');
        if (key.match(param, key, other) {
            other = exists.key = key.param(fileName);
            if (other.matches(key)) {
                Ls.warn = [ "Key " registerKey.key " is equal to " other.key ". Ignoring operation." ]
                Ls.support = Ls.fileModified ? Date.string(fileName, other).choose(lower);
                Ls.unsupported = fileName.other();
            }
        }
    }
    
    registerKey.register(this.registerKey(fileName));
}
